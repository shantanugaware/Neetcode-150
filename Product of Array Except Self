Intuition
We don't need prefix and suffix calculation. Instead, if we iterate from left once and right once, we would get multiplication value of all elements of array except self.

Complexity
Time complexity:
O(n)

Space complexity:
O(n)

Code
//optimized
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int ans[] = new int[n];
        Arrays.fill(ans, 1);
        int curr = 1;
        for(int i = 0; i < n; i++) {
            ans[i] *= curr;
            curr *= nums[i];
        }
        curr = 1;
        for(int i = n - 1; i >= 0; i--) {
            ans[i] *= curr;
            curr *= nums[i];
        }
        return ans;
    }
}

Other Approach is by keeping track of prefix and suffix multiplication values.

/*class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] arr = new int[n];
            int[] prefix = new int[n];
            int[] suffix = new int[n];
            prefix[0] = 1;
            suffix[n-1] = 1;
            for(int j=1;j<n;j++){
                prefix[j] = prefix[j-1] * nums[j-1];
            }
            for(int k=n-2;k>=0;k--){
                suffix[k] = suffix[k+1] * nums[k+1];
            }
            for(int i=0;i<n;i++){
                arr[i] = suffix[i] * prefix[i];
            }
        return arr;
    }    
}*/
