class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] small = nums1;
        int[] large = nums2;
        int total = small.length+large.length;
        int half = (total + 1) / 2;

        if(large.length<small.length){
            int[] temp = large;
            large = small;
            small = temp;
        }
        int l=0;
        int r=small.length;
        while(l<=r){
            int mid = (l+r)/2;
            int rem = half-mid;

            int smallL = mid>0 ? small[mid-1] : Integer.MIN_VALUE;
            int smallR = mid<small.length ? small[mid]: Integer.MAX_VALUE;
            int largeL = rem>0 ? large[rem-1] : Integer.MIN_VALUE;
            int largeR = rem<large.length ? large[rem] : Integer.MAX_VALUE;

            if(smallL <= largeR && largeL<=smallR){
                if(total%2==0){
                    return (Math.min(smallR, largeR) + Math.max(smallL, largeL)) / 2.0;
                }
                return Math.max(smallL, largeL);
            }
            else if(smallL>largeR){
                r=mid-1;
            }
            else l=mid+1;
        }
        return -1;
    }
}
