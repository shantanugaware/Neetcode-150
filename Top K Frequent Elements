Intuition
To keep track of frequency means to jot it down in a map! And use Heap or Priority Queue to keep track of most occuring element.

Approach
Populate map with each elements individual frequency count. Then whichever element had most frequency, maintain them in min PQ, of Map.Entry type) ((a,b) -> a.getValue() - b.getValue()) does create minPQ for us.
(We have used minPQ instead of maxPQ because leetcode seems to take less time and space with minPQ than that of maxPQ).
Complexity
Time complexity:
O(nlogn)

Space complexity:
O(n)

Code
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if(nums.length == k) return nums;
        int[] res = new int[k];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i], map.getOrDefault(nums[i],0)+1);
        }
        PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<>((a,b) -> a.getValue() - b.getValue());
        for(Map.Entry<Integer,Integer> entry : map.entrySet()){
            pq.add(entry);
            if(pq.size()>k) pq.poll();
        }
        for(int i = k-1;i>=0;i--){
            res[i] = pq.poll().getKey();
        }
        return res;
    }
}
