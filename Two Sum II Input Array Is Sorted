Intuition
As array is sorted, and there's always a unique solution to every problem, we can use it our advantage. Start with 2 pointers from each end of array. if numbers[i]+numbers[j] < target, that means, we need a bigger value, since j is already at the biggest possible for that target value, we can increase i. similarly for numbers[i]+numbers[j] > target.

Complexity
Time complexity:
O(n)

Space complexity:
O(1)

Code
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] res = new int[]{1,1};
        int i=0;
        int j=numbers.length-1;
        while(i<j){
            if((numbers[i]+numbers[j])<target) i++;
            else if((numbers[i]+numbers[j])>target) j--;
            else{
                res[0] += i;
                res[1] += j;
                break;
            }
        }
        return res;
    }
}
