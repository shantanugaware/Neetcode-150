class Solution {
    public String minWindow(String s, String t) {
        if(t.length()>s.length()) return ("");
        Map<Character, Integer> need = new HashMap<>();
        for(char c:t.toCharArray()){
            need.put(c, need.getOrDefault(c,0)+1);
        }

       int left =0;
       int right =0;
       int start=0;
       int required = t.length();
       int minLen = Integer.MAX_VALUE;

        while(right<s.length()){
            char rChar = s.charAt(right);
            if (need.containsKey(rChar)) {
                if (need.get(rChar) > 0) {
                    required--;
                }
                need.put(rChar, need.get(rChar) - 1);
            }
            right++;

            while(required==0){
                if (right - left < minLen) {
                    minLen = right - left;
                    start = left;
                }

                char lChar = s.charAt(left);
                if (need.containsKey(lChar)) {
                    need.put(lChar, need.get(lChar) + 1);
                    if (need.get(lChar) > 0) {
                        required++;
                    }
                }
                left++;
            }

            
        }
        return minLen == Integer.MAX_VALUE ? "" : s.substring(start, start + minLen);
    }
}
